from torch.optim import Adam
from torch import Tensor, nn, linalg
from torch import rand, tensor, zeros_like
from torch import sqrt, sum, mean
from PathManager import PathManager
from Haar3AugmentedUtility import HaarDecomp, HaarRecons
from Haar3AugmentedUtility import Haar3DecompAug, Haar3ReconsAug
from torch.nn.functional import normalize
from Haar3AugmentedNetwork import H3AN

"""
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
"""
pm = PathManager()
"""
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
"""
N: int = 6
f: Tensor = rand(3**N)
print("sflk", f, f.shape, sep="\n")
"""
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
"""
# ψ = tensor([1 / 2, sqrt(tensor(3)) / 2])
# print(f"ψ={ψ}")
# φ = tensor([sqrt(tensor(3)) / 2, -1 / 2])
# print(f"φ={φ}")
# """ψ & φ
# ────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
# """
# print(f"⟨ψ, ψ⟩={sum(ψ**2)}")
# print(f"⟨φ, φ⟩={sum(φ**2)}")
# """check ⟨ψ, ψ⟩=1=⟨φ, φ⟩
# ────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
# """
# f_hat = HaarDecomp(N, f, ψ, φ)
# print("lskg", f_hat, sep="\n")
# """
# ────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
# """
# print("lsgg", sum(f_hat**2), sep="\n")
# print("dlhk", sum(f**2), sep="\n")
# """
# ────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
# """
# f_rec = HaarRecons(N, f_hat, ψ, φ)
# print("sglb", f, f_rec, sep="\n")
# """
# ────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
# """
"SEP"
"""
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
"""
Φ_P = rand([N, 3, 3])
Q_row, _ = linalg.qr(Φ_P.transpose(-2, -1), mode="reduced")
Φ: Tensor = Q_row.transpose(-2, -1)
print(f"Φ={Φ}")
print(f"⟨Φ, Φ⟩={sum(Φ**2,2)}")
"""
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
"""
f_hat = Haar3DecompAug(N, f, Φ)
print("nglk", f_hat, sep="\n")
"""
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
"""
print("gnkl", sum(f_hat**2), sep="\n")
print("glgs", sum(f**2), sep="\n")
"""
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
"""
f_rec = Haar3ReconsAug(N, f_hat, Φ)
print("lfng", f, f_rec, sep="\n")
"""reconstruction success
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
"""
"SEP"
"""
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
"""
δ = H3AN(N)
"""
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
"""
# f = f.to("cuda")
# δ.to("cuda")
# """
# ────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
# """
optimizer = Adam(δ.parameters(), lr=5e-5)
for itm in δ.parameters():
    print("slgb", itm, sep="\n")
    print(f"⟨Φ, Φ⟩={sum(itm**2,1)}")
f_hat: Tensor = δ(f)
print("lgbs", f_hat, mean(f_hat**2), mean(f**2), mean(f_hat**4), sep="\n")
# mse = nn.MSELoss()
for i in range(20000):
    optimizer.zero_grad()

    f_hat: Tensor = δ(f)

    loss: Tensor = -mean(f_hat**4)
    loss.backward()

    optimizer.step()
    if (i + 1) % 200 == 0:
        print(f"{i:5d} {loss.tolist():5.2e}")
f_hat: Tensor = δ(f)
print("gslb", f_hat, mean(f_hat**2), mean(f**2), mean(f_hat**4), sep="\n")
"""
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
"""
import matplotlib.pyplot as plt

plt.plot(f_hat.detach().numpy())
plt.show()
print("slbg", f.shape, δ.Φ_P.shape, sep="\n")
"""
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
"""
Q_row, _ = linalg.qr(δ.Φ_P.transpose(-2, -1), mode="reduced")
Φ: Tensor = Q_row.transpose(-2, -1)
f_rec = Haar3ReconsAug(N, f_hat, Φ)
print("bsgl", f, f_rec, sep="\n")
"""
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
"""
eps = 0.1
mask = f_hat.abs() < eps
f_hat[mask] = 0
f_rec = Haar3ReconsAug(N, f_hat, Φ)
print(f"non-zero={3**N-sum(mask)}")
print("glli", f_hat, sep="\n")
print("gllk", f, f_rec, sep="\n")
print("lsig", f - f_rec, mean((f - f_rec) ** 2), sep="\n")
"""
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
"""
plt.plot(f_rec.detach().numpy())
plt.plot(f.detach().numpy())
plt.show()
print("slbg", f.shape, δ.Φ_P.shape, sep="\n")
"""
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
"""
