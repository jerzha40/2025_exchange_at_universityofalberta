from torch.optim import Adam
from torch import Tensor, nn
from torch import rand, tensor, zeros_like
from torch import sqrt, sum, mean
from PathManager import PathManager
from HaarAugmentedUtility import HaarDecomp, HaarRecons
from HaarAugmentedUtility import HaarDecompAug, HaarReconsAug
from torch.nn.functional import normalize
from HaarAugmentedNetwork import HAN

"""
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
"""
pm = PathManager()
"""
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
"""
N: int = 10
f: Tensor = rand(2**N)
print("sflk", f, f.shape, sep="\n")
"""
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
"""
ψ = tensor([1 / 2, sqrt(tensor(3)) / 2])
print(f"ψ={ψ}")
φ = tensor([sqrt(tensor(3)) / 2, -1 / 2])
print(f"φ={φ}")
"""ψ & φ
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
"""
print(f"⟨ψ, ψ⟩={sum(ψ**2)}")
print(f"⟨φ, φ⟩={sum(φ**2)}")
"""check ⟨ψ, ψ⟩=1=⟨φ, φ⟩
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
"""
f_hat = HaarDecomp(N, f, ψ, φ)
print("lskg", f_hat, sep="\n")
"""
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
"""
print("lsgg", sum(f_hat**2), sep="\n")
print("dlhk", sum(f**2), sep="\n")
"""
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
"""
f_rec = HaarRecons(N, f_hat, ψ, φ)
print("sglb", f, f_rec, sep="\n")
"""
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
"""
"SEP"
"""
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
"""
Φ = rand([N, 2])
Φ = normalize(Φ, 2, 1)
Ψ = zeros_like(Φ)
Ψ[:, 0] = Φ[:, 1]
Ψ[:, 1] = -Φ[:, 0]
print(f"Φ={Φ}")
print(f"Ψ={Ψ}")
print(f"⟨Φ, Φ⟩={sum(Φ**2,1)}")
print(f"⟨Ψ, Ψ⟩={sum(Ψ**2,1)}")
print(f"⟨Ψ, Φ⟩={sum(Ψ*Φ,1)}")
"""
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
"""
f_hat = HaarDecompAug(N, f, Ψ, Φ)
print("nglk", f_hat, sep="\n")
"""
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
"""
print("gnkl", sum(f_hat**2), sep="\n")
print("glgs", sum(f**2), sep="\n")
"""
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
"""
f_rec = HaarReconsAug(N, f_hat, Ψ, Φ)
print("lfng", f, f_rec, sep="\n")
"""reconstruction success
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
"""
"SEP"
"""
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
"""
δ = HAN(N)
"""
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
"""
# f = f.to("cuda")
# δ.to("cuda")
# """
# ────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
# """
optimizer = Adam(δ.parameters(), lr=5e-5)
for itm in δ.parameters():
    print("slgb", itm, sep="\n")
    print(f"⟨Φ, Φ⟩={sum(itm**2,1)}")
f_hat: Tensor = δ(f)
print("lgbs", f_hat, mean(f_hat**2), mean(f**2), mean(f_hat**4), sep="\n")
# mse = nn.MSELoss()
for i in range(20000):
    optimizer.zero_grad()

    f_hat: Tensor = δ(f)

    loss: Tensor = -mean(f_hat**4)
    loss.backward()

    optimizer.step()
    if (i + 1) % 200 == 0:
        print(f"{i:5d} {loss.tolist():5.2e}")
f_hat: Tensor = δ(f)
print("gslb", f_hat, mean(f_hat**2), mean(f**2), mean(f_hat**4), sep="\n")
"""
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
"""
import matplotlib.pyplot as plt

plt.plot(f_hat.detach().numpy())
plt.show()
print("slbg", f.shape, δ.P.shape, sep="\n")
"""
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
"""
Φ = normalize(δ.P)
Ψ = zeros_like(Φ)
Ψ[:, 0] = Φ[:, 1]
Ψ[:, 1] = -Φ[:, 0]
f_rec = HaarReconsAug(N, f_hat, Ψ, Φ)
print("bsgl", f, f_rec, sep="\n")
"""
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
"""
eps = 0.1
mask = f_hat.abs() < eps
f_hat[mask] = 0
f_rec = HaarReconsAug(N, f_hat, Ψ, Φ)
print(f"non-zero={2**N-sum(mask)}")
print("glli", f_hat, sep="\n")
print("gllk", f, f_rec, sep="\n")
print("lsig", f - f_rec, mean((f - f_rec) ** 2), sep="\n")
"""
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
"""
plt.plot(f_rec.detach().numpy())
plt.plot(f.detach().numpy())
plt.show()
print("slbg", f.shape, δ.P.shape, sep="\n")
"""
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
"""
