import torch
from torch import Tensor
from torch import rand, tensor, zeros_like
from torch import sqrt, sum
from PathManager import PathManager
from HaarAugmentedUtility import HaarDecomp, HaarRecons
from HaarAugmentedUtility import HaarDecompAug, HaarReconsAug
from torch.nn.functional import normalize

"""
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
"""
pm = PathManager()
"""
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
"""
N: int = 3
f: Tensor = rand(2**N)
print("sflk", f, f.shape, sep="\n")
"""
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
"""
ψ = tensor([1 / 2, sqrt(tensor(3)) / 2])
print(f"ψ={ψ}")
φ = tensor([sqrt(tensor(3)) / 2, -1 / 2])
print(f"φ={φ}")
"""ψ & φ
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
"""
print(f"⟨ψ, ψ⟩={sum(ψ**2)}")
print(f"⟨φ, φ⟩={sum(φ**2)}")
"""check ⟨ψ, ψ⟩=1=⟨φ, φ⟩
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
"""
f_hat = HaarDecomp(N, f, ψ, φ)
print("lskg", f_hat, sep="\n")
"""
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
"""
print("lsgg", sum(f_hat**2), sep="\n")
print("dlhk", sum(f**2), sep="\n")
"""
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
"""
f_rec = HaarRecons(N, f_hat, ψ, φ)
print("sglb", f, f_rec, sep="\n")
"""
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
"""
"SEP"
"""
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
"""
Φ = rand([N, 2])
Φ = normalize(Φ, 2, 1)
Ψ = zeros_like(Φ)
Ψ[:, 0] = Φ[:, 1]
Ψ[:, 1] = -Φ[:, 0]
print(f"Φ={Φ}")
print(f"Ψ={Ψ}")
print(f"⟨Φ, Φ⟩={sum(Φ**2,1)}")
print(f"⟨Ψ, Ψ⟩={sum(Ψ**2,1)}")
print(f"⟨Ψ, Φ⟩={sum(Ψ*Φ,1)}")
"""
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
"""
f_hat = HaarDecompAug(N, f, Ψ, Φ)
print("nglk", f_hat, sep="\n")
"""
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
"""
print("gnkl", sum(f_hat**2), sep="\n")
print("glgs", sum(f**2), sep="\n")
"""
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
"""
f_rec = HaarReconsAug(N, f_hat, Ψ, Φ)
print("lfng", f, f_rec, sep="\n")
"""reconstruction success
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
"""
